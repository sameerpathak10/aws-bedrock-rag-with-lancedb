version: 0.2 # Specify the buildspec version

phases:
  install:
    commands:
      - echo Installing source NPM dependencies...
      - cd document-processor # Change directory to the source code directory
      #- npm install # Install dependencies from package.json

  pre_build:
    commands:
      - echo Building Docker image...
      - echo $AWS_DEFAULT_REGION # Optional for logging
      - echo $IMAGE_REPO_NAME # Optional for logging
      - echo $IMAGE_TAG # Optional for logging
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG . # Build Docker image

  build:
    commands:
      # This phase is optional and can be removed if pre_build covers everything
      # commands:
      #   - (commands from pre_build can be repeated here)
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG # Optional for ECR push

  post_build:
    commands:
      - echo Pushing Docker image to ECR... # Optional if not using ECR
      - echo $AWS_DEFAULT_REGION # Optional for logging
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com # Optional for ECR login (requires IAM role with access)
      - docker push $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG # Optional for ECR push
      - echo Build completed on `date`
      - aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri $ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

#artifacts:
 # files:
  #  - Dockerfile # Include Dockerfile in artifacts (optional)
